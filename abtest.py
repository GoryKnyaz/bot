from time import time

from easygui import fileopenbox
from telebot import *

from config import TOKEN
from db_reader import Reader, write_to_excel
from finder_regex import Finder
from psql import PSQL

markers = ['–†–µ–∫–ª–∞–º–∞ –∫—É—Ä—Å–æ–≤', '–†–µ–∫–ª–∞–º–∞ —Ç–≥-–∫–∞–Ω–∞–ª–æ–≤', '–†–µ–∫–ª–∞–º–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö']


class ABTest:

    def __init__(self):
        self.my_chat_id = 0
        self.my_PSQL = PSQL()
        self.my_finder = Finder()
        self.my_dataset = Reader()
        self.is_selects_file = False
        self.is_dataset_selected = False
        self.my_bot = telebot.TeleBot(TOKEN)

    def reset(self):
        self.my_chat_id = 0
        self.my_PSQL = PSQL()
        self.my_finder = Finder()
        self.my_dataset = Reader()
        self.is_selects_file = False
        self.is_dataset_selected = False

    def authorization(self, text):
        user_data = text.split(' ')
        if len(user_data) == 2:
            if self.my_PSQL.authorization(user_data[0], user_data[1]):
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for marker in markers:
                    button = types.KeyboardButton(marker)
                    markup.add(button)
                self.my_bot.send_message(self.my_chat_id,
                                         '‚úÖ–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.\n–í—ã–±–µ—Ä–µ—Ç–µ –º–∞—Ä–∫–µ—Ä —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π',
                                         reply_markup=markup)
            else:
                self.my_bot.send_message(self.my_chat_id, '‚ùå–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ')
        else:
            self.my_bot.send_message(self.my_chat_id, '‚ùå–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å')

    def set_marker(self, text):
        if text in markers:
            self.my_finder.marker = text
            self.my_bot.send_message(self.my_chat_id, '‚úÖ–ú–∞—Ä–∫–µ—Ä –≤—ã–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ.',
                                     reply_markup=telebot.types.ReplyKeyboardRemove())
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button = types.KeyboardButton("üìù–§–∞–π–ª")
            markup.add(button)
            self.my_bot.send_message(self.my_chat_id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç', reply_markup=markup)
        else:
            self.my_bot.send_message(self.my_chat_id, '‚ùå–¢–∞–∫–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–µ—Ç–µ –µ—â–µ —Ä–∞–∑.')

    def select_dataset(self):
        self.is_selects_file = True
        path_to_dataset = fileopenbox(filetypes=['*.txt', '*.zip', '*.xlsx'])
        if path_to_dataset != '':
            try:
                self.my_dataset.read(path_to_dataset)
                self.my_bot.send_message(self.my_chat_id, '‚úÖ–§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ.',
                                         reply_markup=telebot.types.ReplyKeyboardRemove())
                self.is_dataset_selected = True
            except ...:
                self.my_bot.send_message(self.my_chat_id, '‚ùå–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç. –í—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π.')
        self.is_selects_file = False

    def ab_test(self):
        result = []
        for regex_mass in self.my_PSQL.parsing_by('marker', self.my_finder.marker)[1:]:
            begin_time = time()
            self.my_finder.reg_ex = regex_mass[2]
            self.my_finder.findInMass(self.my_dataset.data)
            result.append(regex_mass[1:] + [time() - begin_time])
        write_to_excel('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã.xlsx', ['–ú–∞—Ä–∫–µ—Ä', '–†–µ–≥_–≤—ã—Ä–∞–∂–µ–Ω–∏–µ', '–í–µ—Ä—Å–∏—è', '–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞'], result)
        with open('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã.xlsx', 'rb') as xlsx_file:
            self.my_bot.send_document(self.my_chat_id, xlsx_file)

    def main(self, text):
        if not self.my_PSQL.is_authorized:
            self.authorization(text)
            self.my_PSQL.create_default_table()
        elif self.my_finder.marker == '':
            self.set_marker(text)
        elif text == 'üìù–§–∞–π–ª' and not self.is_selects_file and not self.is_dataset_selected:
            self.select_dataset()
            self.ab_test()
